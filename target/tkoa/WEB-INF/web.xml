<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
											http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
	id="WebApp_ID" 
	version="3.0" >
  <display-name>诺特考勤管理系统</display-name>
  <welcome-file-list>
  	<!-- 欢迎页面 -->
  	<welcome-file>/index.jsp</welcome-file>
  </welcome-file-list>
  <!-- 配置错误异常页 -->
  <error-page>
  	<error-code>404</error-code>	<!-- 指定错误代码 -->
  	<location>/error.jsp</location>	<!-- 如果发生 HTTP404 错误，则返回 location子元素中指定的文件 -->
  </error-page>
  <!-- 会话时间配置 -->
  <session-config>
  	<session-timeout>30</session-timeout>
  </session-config>
  
  <!-- 过滤器 -->
  <!-- 解决中文字符编码问题，将页面编码统一设置为UTF-8 -->
  <filter>
  	<filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
    	<param-name>encoding</param-name>	
      <param-value>UTF-8</param-value>	<!-- 编码格式 -->
    </init-param>
    <init-param>
    	<param-name>forceEncoding</param-name> <!-- 是否允许设置的encoding 覆盖request和response中已经存在的encodings -->
    	<param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>  
  
  <!-- spring security -->
  <filter>
	  <filter-name>springSecurityFilterChain</filter-name>
	  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
	  <filter-name>springSecurityFilterChain</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>

  <!-- 配置 Struts 2 框架的核心 Filter -->
  <filter>
  	<filter-name>struts2</filter-name>
  	<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <!-- 配置 Filter 拦截的 URL -->
  <filter-mapping>
  	<filter-name>struts2</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 配置 Struts 2 的标签库 -->
  <jsp-config>
  	<taglib>
    	<taglib-uri>struts2</taglib-uri>
    	<taglib-location>/WEB-INF/tld/struts-tags.tld</taglib-location>
    </taglib>
    <taglib>
    	<taglib-uri>secutiry</taglib-uri>
    	<taglib-location>/WEB-INF/tld/security.tld</taglib-location>
    </taglib>
  </jsp-config>
  
  <!-- 由于加载spring的默认配置文件位置一般是在/WEB-INF/下找applicationContext.xml文件。
			   而Myeclipse文件自动生成的applicationContext文件是放在/WEB-INF/classes/applicationContext.xml。
			  所以在默认加载中是找不到applicationContext.xml文件的，必须加入下面配置 -->
  <context-param>
    <param-name>contextConfigLocation </param-name>
    <param-value>
    	/WEB-INF/classes/applicationContext-*.xml
    </param-value>
	</context-param>
  <context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>myapp.root</param-value>
	</context-param>
	<!-- 加载Log4J 配置文件  -->
  <context-param>
  	<param-name>log4jConfigLocation</param-name>
    <param-value>/WEB-INF/classes/log4j.properties</param-value>
  </context-param>
  <context-param>
  	<param-name>log4jRefreshInterval</param-name>
    <param-value>60000</param-value>	<!-- 每60秒扫描一下配置文件的变化 -->
  </context-param>
  
  <!-- 设置监听器 -->
	<listener>
    <listener-class>
      org.springframework.security.web.session.HttpSessionEventPublisher
    </listener-class>
  </listener>
  <!-- ContextLoaderListener 监听器用于初始化 spring -->
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
  	<!-- Log4jConfigListener会去 log4j.propeties 读取配置文件;开一条watchdog线程（这样在web服务启动后再去修改配置文件也不用重新启动web服务了） -->
  	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  
</web-app>
